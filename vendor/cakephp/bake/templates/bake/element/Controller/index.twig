{% set allAssociations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'BelongsToMany')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasOne')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasMany')) %}

private $identity;

public function initialize(): void
{
    parent::initialize();
    $this->identity = $this->request->getSession()->read('Auth.User.id');
}

private function checkPermission(string $permission): bool
{
    if (!$this->identity || !AccessChecker::hasPermission($this->identity, $permission)) {
        $this->Flash->error('Você não tem permissão para acessar esta área.');
        $this->redirect('/');
        return false;
    }
    return true;
}

public function index(): void
{
    if (!$this->checkPermission('{{ currentModelName }}/index')) {
        return;
    }

    $search = $this->request->getQuery('search');
    $conditions = [];

    if ($search) {
        if ($search) {
            $conditions = [
                'OR' => [
                    '{{ currentModelName }}.name LIKE' => '%' . $search . '%',
                ],
            ];
        }
    }

    $query = $this->{{ currentModelName }}->find('all', [
        'conditions' => $conditions,
        'contain' => {{ Bake.exportArray(allAssociations)|raw }},
    ]);

    ${{ pluralName }} = $this->paginate($query);

    {% set compact = [] %}
    {% set associations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
    {% set associations = associations|merge(Bake.aliasExtractor(modelObj, 'BelongsToMany')) %}

    {%- for assoc in associations %}
        {%- set otherName = Bake.getAssociatedTableAlias(modelObj, assoc) %}
        {%- set otherPlural = otherName|variable %}
            ${{ otherPlural }} = $this->{{ currentModelName }}->{{ otherName }}->find('list', ['limit' => 200])->all();
            {{- "\n" }}
        {%- set compact = compact|merge(["'#{otherPlural}'"]) %}
    {% endfor %}

    $this->set(compact('{{ pluralName }}', {{ compact|join(', ')|raw }}));
}