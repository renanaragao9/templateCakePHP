
{% set allAssociations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'BelongsToMany')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasOne')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasMany')) %}
public function delete(?int $id = null): Response
    {
        if (!$this->checkPermission('{{ currentModelName }}/delete')) {
            return $this->redirect(['action' => 'index']);
        }
        
        $this->request->allowMethod(['post', 'delete']);
        
        ${{ singularName }} = $this->{{ currentModelName }}->get($id);
        
        if ($this->{{ currentModelName }}->delete(${{ singularName }})) {
            $this->log('O {{ singularHumanName|lower }} foi deletado com sucesso.', 'info');
            $this->Flash->success(__('O {{ singularHumanName|lower }} foi deletado com sucesso..'));
        } else {
            $this->Flash->error(__('O {{ singularHumanName|lower }} não pode ser deletado. Por favor, tente novamente.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function export(): Response
    {
        if (!$this->checkPermission('{{ currentModelName }}/index')) {
            return $this->redirect(['action' => 'index']);
        }

        ${{ pluralHumanName }} = $this->{{ currentModelName }}->find('all', [
            'contain' => {{ Bake.exportArray(allAssociations)|raw }},
        ]);

        $csvData = [];
        $header = [{{ fields|map(field => "'" ~ field ~ "'")|join(', ') }}];
        $csvData[] = $header;

        foreach (${{ pluralHumanName }} as ${{ singularHumanName|lower }}) {
            $csvData[] = [
                {{ fields|map(field => '$' ~ singularHumanName|lower ~ '->' ~ field)|join(', ') }}     ];
        }

        $filename = '{{ pluralHumanName }}_' . date('Y-m-d_H-i-s') . '.csv';
        $filePath = TMP . $filename;

        $file = fopen($filePath, 'w');
        foreach ($csvData as $line) {
            fputcsv($file, $line);
        }
        fclose($file);

        $response = $this->response->withFile(
            $filePath,
            ['download' => true, 'name' => $filename]
        );

        return $response;
    }

    /*
        # Controller API Template
        # Path: src/Controllers/API/{{ currentModelName }}Controller.php
        # Copie e cole o conteúdo abaixo no arquivo acima
        # Lembre-se de alterar os valores das variáveis de acordo com o seu projeto
        # Não esqueça de adicionar as rotas no arquivo src/Config/routes.php
        # Para acessar a API, utilize a URL: http://localhost:8765/api/{{ pluralHumanName }}
    */

    /*
        <?php

        namespace App\Controller\Api;

        use App\Controller\AppController;
        use Cake\Http\Response;

        class {{ currentModelName }}Controller extends AppController
        {
            public function fetch{{ currentModelName }}(): Response
            {
                $this->request->allowMethod(['get']);

                try {
                    $data = $this->{{ currentModelName }}->find('all')->toArray();
                    $response = [
                        'status' => 'success',
                        'data' => $data
                    ];
                } catch (\Exception $e) {
                    $response = [
                        'status' => 'error',
                        'message' => $e->getMessage()
                    ];
                }
                return $this->response
                    ->withType('application/json')
                    ->withStringBody(json_encode($response));
            }

            public function fetch{{ singularHumanName }}($id): Response
            {
                $this->request->allowMethod(['get']);

                try {
                    $data = $this->{{ currentModelName }}->get($id);
                    $response = [
                        'status' => 'success',
                        'data' => $data
                    ];
                } catch (\Exception $e) {
                    $response = [
                        'status' => 'error',
                        'message' => $e->getMessage()
                    ];
                }
                return $this->response
                    ->withType('application/json')
                    ->withStringBody(json_encode($response));
            }

            public function add{{ singularHumanName }}(): Response
            {
                $this->request->allowMethod(['post']);

                ${{ singularName }} = $this->{{ currentModelName }}->newEmptyEntity();
                ${{ singularName }} = $this->{{ currentModelName }}->patchEntity(${{ singularName }}, $this->request->getData());

                if ($this->{{ currentModelName }}->save(${{ singularName }})) {
                    $response = [
                        'status' => 'success',
                        'data' => ${{ singularName }}
                    ];
                } else {
                    $response = [
                        'status' => 'error',
                        'message' => 'Unable to add {{ singularHumanName|lower }}'
                    ];
                }

                return $this->response
                    ->withType('application/json')
                    ->withStringBody(json_encode($response));
            }

            public function edit{{ singularHumanName }}($id): Response
            {
                $this->request->allowMethod(['put', 'patch']);

                ${{ singularName }} = $this->{{ currentModelName }}->get($id);
                ${{ singularName }} = $this->{{ currentModelName }}->patchEntity(${{ singularName }}, $this->request->getData());

                if ($this->{{ currentModelName }}->save(${{ singularName }})) {
                    $response = [
                        'status' => 'success',
                        'data' => ${{ singularName }}
                    ];
                } else {
                    $response = [
                        'status' => 'error',
                        'message' => 'Unable to update {{ singularHumanName|lower }}'
                    ];
                }

                return $this->response
                    ->withType('application/json')
                    ->withStringBody(json_encode($response));
            }

            public function delete{{ singularHumanName }}($id): Response
            {
                $this->request->allowMethod(['delete']);

                ${{ singularName }} = $this->{{ currentModelName }}->get($id);

                if ($this->{{ currentModelName }}->delete(${{ singularName }})) {
                    $response = [
                        'status' => 'success',
                        'message' => '{{ singularHumanName|lower }} deleted successfully'
                    ];
                } else {
                    $response = [
                        'status' => 'error',
                        'message' => 'Unable to delete {{ singularHumanName|lower }}'
                    ];
                }

                return $this->response
                    ->withType('application/json')
                    ->withStringBody(json_encode($response));
            }
        }
    */

    /*
        # Rotas API Template
        # Path: src/Config/routes.php
        # Copie e cole o conteúdo abaixo no arquivo acima
        # Lembre-se de alterar os valores das variáveis de acordo com o seu projeto
    */
    
    /*
        # {{ pluralHumanName }} routes template prefix API   

        # {{ pluralHumanName }} routes API
        $routes->connect('/{{ pluralHumanName|lower }}', ['controller' => '{{ name }}', 'action' => 'fetch{{ name }}', 'method' => 'GET']);
        $routes->connect('/{{ singularHumanName|lower }}/:id', ['controller' => '{{ name }}', 'action' => 'fetch{{ singularHumanName }}', 'method' => 'GET'], ['pass' => ['id'], 'id' => '\d+']);
        $routes->connect('/{{ singularHumanName|lower }}-add', ['controller' => '{{ name }}', 'action' => 'add{{ singularHumanName }}', 'method' => 'POST']);
        $routes->connect('/{{ singularHumanName|lower }}-edit/:id', ['controller' => '{{ name }}', 'action' => 'edit{{ singularHumanName }}', 'method' => ['PUT', 'PATCH']], ['pass' => ['id'], 'id' => '\d+']);
        $routes->connect('/{{ singularHumanName|lower }}-delete/:id', ['controller' => '{{ name }}', 'action' => 'delete{{ singularHumanName }}', 'method' => 'DELETE'], ['pass' => ['id'], 'id' => '\d+']);
    */

    /*
        # {{ pluralHumanName }} routes simple template prefix /
        
        # {{ pluralHumanName }} routes
        $routes->connect('/{{ pluralHumanName|lower }}', ['controller' => 'Users', 'action' => 'index']);
        $routes->connect('/{{ singularHumanName|lower }}/view/:id', ['controller' => 'Users', 'action' => 'view'], ['pass' => ['id'], 'id' => '\d+']);
    */